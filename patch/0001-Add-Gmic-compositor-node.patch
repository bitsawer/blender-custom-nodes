From 88ef80f54dbaee0f670eedd781421191aed918d2 Mon Sep 17 00:00:00 2001
From: bitsawer <sawerduster@gmail.com>
Date: Tue, 3 Oct 2017 16:01:29 +0300
Subject: [PATCH] Add Gmic compositor node

---
 extern/CMakeLists.txt                              |   1 +
 extern/gmic64/CMakeLists.txt                       |  38 ++++++
 extern/gmic64/README                               | 114 +++++++++++++++++
 extern/gmic64/include/gmic_libc.h                  | 109 ++++++++++++++++
 extern/gmic64/libcgmicstatic.lib                   | Bin 0 -> 2312 bytes
 release/scripts/startup/nodeitems_builtins.py      |   1 +
 source/blender/blenkernel/BKE_node.h               |   1 +
 source/blender/blenkernel/intern/node.c            |   3 +-
 source/blender/compositor/CMakeLists.txt           |   7 +
 source/blender/compositor/intern/COM_Converter.cpp |   4 +
 source/blender/compositor/nodes/COM_GmicNode.cpp   |  25 ++++
 source/blender/compositor/nodes/COM_GmicNode.h     |  13 ++
 .../compositor/operations/COM_GmicOperation.cpp    | 141 +++++++++++++++++++++
 .../compositor/operations/COM_GmicOperation.h      |  26 ++++
 source/blender/editors/space_node/drawnode.c       |  11 ++
 source/blender/makesdna/DNA_node_types.h           |   9 ++
 source/blender/makesrna/intern/rna_nodetree.c      |  24 ++++
 source/blender/nodes/CMakeLists.txt                |   1 +
 source/blender/nodes/NOD_composite.h               |   1 +
 source/blender/nodes/NOD_static_types.h            |   1 +
 .../nodes/composite/nodes/node_composite_gmic.c    |  40 ++++++
 source/creator/CMakeLists.txt                      |   1 +
 22 files changed, 570 insertions(+), 1 deletion(-)
 create mode 100644 extern/gmic64/CMakeLists.txt
 create mode 100644 extern/gmic64/README
 create mode 100644 extern/gmic64/include/gmic_libc.h
 create mode 100644 extern/gmic64/libcgmicstatic.lib
 create mode 100644 source/blender/compositor/nodes/COM_GmicNode.cpp
 create mode 100644 source/blender/compositor/nodes/COM_GmicNode.h
 create mode 100644 source/blender/compositor/operations/COM_GmicOperation.cpp
 create mode 100644 source/blender/compositor/operations/COM_GmicOperation.h
 create mode 100644 source/blender/nodes/composite/nodes/node_composite_gmic.c

diff --git a/extern/CMakeLists.txt b/extern/CMakeLists.txt
index f7e9852..9f3f0eb 100644
--- a/extern/CMakeLists.txt
+++ b/extern/CMakeLists.txt
@@ -37,6 +37,7 @@ if(CMAKE_COMPILER_IS_GNUCC)
 endif()
 
 
+add_subdirectory(gmic64)
 add_subdirectory(rangetree)
 add_subdirectory(wcwidth)
 
diff --git a/extern/gmic64/CMakeLists.txt b/extern/gmic64/CMakeLists.txt
new file mode 100644
index 0000000..fe4dbb4
--- /dev/null
+++ b/extern/gmic64/CMakeLists.txt
@@ -0,0 +1,38 @@
+# ***** BEGIN GPL LICENSE BLOCK *****
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; either version 2
+# of the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software Foundation,
+# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+#
+# The Original Code is Copyright (C) 2006, Blender Foundation
+# All rights reserved.
+#
+# The Original Code is: all of this file.
+#
+# Contributor(s):
+#
+# ***** END GPL LICENSE BLOCK *****
+
+set(INC
+	include
+)
+
+set(INC_SYS
+
+)
+
+set(SRC
+	include/gmic_libc.h
+)
+
+# blender_add_lib(extern_gmic64 "${SRC}" "${INC}" "${INC_SYS}")
diff --git a/extern/gmic64/README b/extern/gmic64/README
new file mode 100644
index 0000000..daaddf7
--- /dev/null
+++ b/extern/gmic64/README
@@ -0,0 +1,114 @@
+--------------------------------------------------------------------------------
+--------------------------------------------------------------------------------
+
+                        _____   _   __  __ _____ _____
+                       / ____| | | |  \/  |_   _/ ____|
+                      | |  __  |_| | \  / | | || |
+                      | | |_ |     | |\/| | | || |
+                      | |__| |     | |  | |_| || |____
+                       \_____|     |_|  |_|_____\_____|
+
+                      GREYC's Magic for Image Computing
+
+                             ( http://gmic.eu )
+
+                                    2.0.5_pre
+
+--------------------------------------------------------------------------------
+
+# In a nutshell
+#---------------
+
+ G'MIC is a full-featured open-source framework for image processing, distributed
+ under the CeCILL license (GPL compatible).
+ It provides several different user interfaces to convert/manipulate/filter/
+ visualize generic image datasets, ranging from 1d scalar signals to 3d+t
+ sequences of multi-spectral volumetric images, thus including 2d color images.
+
+ These user interfaces are:
+
+ 1 - A command-line interface 'gmic', to use the G'MIC image processing features
+     from a shell. In this setting, G'MIC may be seen as a friendly companion to
+     the ImageMagick or GraphicsMagick software suites.
+
+ 2 - A small, portable, thread-safe and multi-threaded, C++ image processing
+     library 'libgmic', to be linked to third-party applications. Its simple API
+     allows programmers to add all G'MIC features in their own software without
+     much efforts (a C API is provided as well).
+
+ 3 - A plug-in 'gmic_gimp_qt' (or 'gmic_gimp_gtk'), to bring G'MIC capabilities
+     to the image retouching software GIMP. More than 450 filters are already
+     available, sorted by category (Artistic, Black & white, Colors, Contours,
+     Deformations, Degradations, Details, Film emulation, Frames, Layers,
+     Light & shadows, Patterns, Rendering, Repair, Sequences, etc.).
+
+ 4 - A web service G'MIC Online, to allow users applying image processing
+     algorithms on their images, directly from a web browser.
+
+ 5 - A Qt-based interface ZArt, for real-time processing of video streaming
+     coming from webcams or video files.
+
+ G'MIC is an open framework: the default script language can be extended with
+ custom G'MIC-written commands, defining thus new image available filters or
+ effects. By the way, it already contains a substantial set of pre-defined image
+ processing algorithms and pipelines (more than 1000).
+
+ G'MIC has been designed with portability in mind, and runs on different
+ platforms (Windows, Unix, MacOSX). It is distributed under the CeCILL license
+ (GPL-compatible). Since 2008, it has been developed in the Image Team of the
+ GREYC laboratory, in Caen/France, by permanent researchers working in the field
+ of image processing on a daily basis.
+
+# Project Managers and main developers
+#-------------------------------------
+
+  David Tschumperlé  ( http://tschumperle.users.greyc.fr/ )
+  Sébastien Fourey   ( https://foureys.users.greyc.fr/ )
+
+  A complete list of contributors is available on the project web page:
+
+                           http://gmic.eu
+
+# Institution
+#-------------
+
+ GREYC Image / CNRS UMR 6072 / FRANCE
+
+ Team web page: https://www.greyc.fr/image
+
+# License
+#---------
+
+ The C++ source code of G'MIC is distributed under the CECILL v.2.0 license
+ (file 'CeCILL.rtf'). This License is a Free-Software copyleft license,
+ compatible with the GPL (using those files in a distributed closed-source
+ project is then forbidden).
+
+ Purchasing proprietary licenses for using G'MIC in closed-source applications
+ is possible. Contact us if you are interested in getting one.
+
+ The CeCiLL v.2.0 license ( http://www.cecill.info/index.en.html ) have been
+ created under the supervision of the three biggest research institutions on
+ computer sciences in France:
+
+   - CNRS  ( http://www.cnrs.fr/ )
+   - CEA   ( http://www.cea.fr/ )
+   - INRIA ( http://www.inria.fr/ )
+
+# More information online
+#-------------------------
+
+  - Home page : http://gmic.eu
+  - G'MIC Online Service : https://gmicol.greyc.fr
+
+  - Google+ group: https://plus.google.com/117441237982283011318/posts
+  - Pixls.us forum: https://discuss.pixls.us/c/software/gmic
+  - Flickr forum: http://www.flickr.com/groups/gmic/discuss
+  - GimpChat forum: http://gimpchat.com/viewforum.php?f=28
+
+  - Tutorial page: http://gmic.eu/tutorial
+  - Reference documentation: http://gmic.eu/reference.shtml
+  - G'MIC wiki: https://github.com/dtschump/gmic-community/wiki
+
+--------------------------------------------------------------------------------
+--------------------------------------------------------------------------------
\ No newline at end of file
diff --git a/extern/gmic64/include/gmic_libc.h b/extern/gmic64/include/gmic_libc.h
new file mode 100644
index 0000000..f88f2d9
--- /dev/null
+++ b/extern/gmic64/include/gmic_libc.h
@@ -0,0 +1,109 @@
+/*
+ #
+ #  File        : gmic_libc.h
+ #                ( C++ header file )
+ #
+ #  Description : GREYC's Magic for Image Computing
+ #                ( http://gmic.eu )
+ #
+ #  Note        : Include this file in your C source code, if you
+ #                want to use the G'MIC interpreter in your own program,
+ #                through the C bridge to the G'MIC library.
+ #
+ #  Copyright   : Tobias Fleischer
+ #                ( https://plus.google.com/u/0/b/117441237982283011318/+TobiasFleischer )
+ #
+ #  License     : CeCILL-B v1.0
+ #                ( http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.html )
+ #
+ #  This software is governed either by the CeCILL-B license
+ #  under French law and abiding by the rules of distribution of free software.
+ #  You can  use, modify and or redistribute the software under the terms of
+ #  the CeCILL-B licenses as circulated by CEA, CNRS and INRIA
+ #  at the following URL: "http://www.cecill.info".
+ #
+ #  As a counterpart to the access to the source code and  rights to copy,
+ #  modify and redistribute granted by the license, users are provided only
+ #  with a limited warranty  and the software's author,  the holder of the
+ #  economic rights,  and the successive licensors  have only  limited
+ #  liability.
+ #
+ #  In this respect, the user's attention is drawn to the risks associated
+ #  with loading,  using,  modifying and/or developing or reproducing the
+ #  software by the user in light of its specific status of free software,
+ #  that may mean  that it is complicated to manipulate,  and  that  also
+ #  therefore means  that it is reserved for developers  and  experienced
+ #  professionals having in-depth computer knowledge. Users are therefore
+ #  encouraged to load and test the software's suitability as regards their
+ #  requirements in conditions enabling the security of their systems and/or
+ #  data to be ensured and,  more generally, to use and operate it in the
+ #  same conditions as regards security.
+ #
+ #  The fact that you are presently reading this means that you have had
+ #  knowledge of the CeCILL-B licenses and that you accept its terms.
+ #
+*/
+
+#ifndef _GMIC_LIBC_H_
+#define _GMIC_LIBC_H_
+
+#if !defined(_MSC_VER) || (_MSC_VER >= 1900)
+#include <stdbool.h>
+#endif
+
+#if defined(WIN32) || defined(_WIN32)
+	#ifdef gmic_build
+		#define GMIC_DLLINTERFACE __declspec(dllexport)
+	#else // #ifdef gmic_build
+		#define GMIC_DLLINTERFACE __declspec(dllimport)
+	#endif // #ifdef gmic_build
+	#define GMIC_CALLCONV __stdcall
+#else // #if defined(WIN32) || defined(_WIN32)
+	#define GMIC_DLLINTERFACE
+	#define GMIC_CALLCONV
+#endif // #if defined(WIN32) || defined(_WIN32)
+
+#define MAX_IMAGE_NAME_LENGTH 255
+
+typedef enum {
+  E_FORMAT_FLOAT = 0,
+  E_FORMAT_BYTE = 1
+} EPixelFormat;
+
+typedef struct {
+  void* data;
+  unsigned int width;
+  unsigned int height;
+  unsigned int depth;
+  unsigned int spectrum;
+  bool is_interleaved;
+  EPixelFormat format;
+  char name[MAX_IMAGE_NAME_LENGTH + 1];
+} gmic_interface_image;
+
+typedef struct {
+  const char* custom_commands;
+  bool ignore_stdlib;
+  float* p_progress;
+  bool* p_is_abort;
+  bool interleave_output;
+  EPixelFormat output_format;
+  bool no_inplace_processing;
+  char* error_message_buffer;
+} gmic_interface_options;
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+
+GMIC_DLLINTERFACE int GMIC_CALLCONV gmic_delete_external(float* p);
+GMIC_DLLINTERFACE int GMIC_CALLCONV gmic_call(const char* _cmd, unsigned int* _nofImages,
+                                              gmic_interface_image* _images, gmic_interface_options* _options);
+GMIC_DLLINTERFACE const char* GMIC_CALLCONV gmic_get_stdlib();
+
+#ifdef __cplusplus
+} //#ifdef  __cplusplus
+#endif
+
+#endif // #ifndef _GMIC_LIBC_H
diff --git a/extern/gmic64/libcgmicstatic.lib b/extern/gmic64/libcgmicstatic.lib
new file mode 100644
index 0000000000000000000000000000000000000000..21873539fab69ab4eccd9a6a5ae5b4773687a4dd
GIT binary patch
literal 2312
zcmcIm&2G~`5dM;ov{(p5g#)dM6hx$!OX8++Py|9Ql&VqFv`W(hC&#r-8Yv-FVkB<d
za^jfBKz)H;qCNp2jvP7g7G>7ntv5e3HPDszXJ%)2X21Pr?MKheu66uE$)-ljnx+<t
znyMC`j_Oq|=JI(ysw)6)1JQFJJ`W_efVoq@&MyOA9Z)|ojMDD@UbSXyzCL(WE$!F#
zsz$4MWHs7NtLK_-(}H1C4$I|9JA529^v!D9hm{>;bECFF3!Ci|gY9HkW~+r@B+b}P
z%W)mU`QSR;cP2L)S4#E`$2EGcO|Jd@Bsnx*T7XxA06UKoB5`1ggwr`-nUEV$B_I(&
z6t@sZg10d`-QOc8oyS8)l0zIl0CjwkhqQ#uteeV?K{tzOYem7px-v?Fj7=A<WCbO;
z*{uDvT<(&&c0Y!%&%V7`iqLHk@~mWR=jeSSec(&LHVr-rf%iI+FEdTsbj@^5Ox>r!
zcdEa*B1XLqb;#`sTn%QIAb-M+>2;)rL<lT;_YW*g9&`owlEf2yVfIw+Lcy82u-mk{
zonGgyn_8_tNtH{L9e;YXy+b04hgA@(*eFRY5s*fc&L|?Q(>|fl&&){V;zC|YOTc1{
zLLi_6Ui8O8<DJ#_$8GY=h8E${Mhi4dzrq?`*zOd8*ZNHqbsGFj7R+R2NEYQZ@i5jE
zyC3yfG^7~)*r&6|rg^zYELs<O#*WWI;5}mz+xMo}ah<z<NdEu$IET)`bydL4(DQTf
zCwaIEy(@B1<3M>i%yLjJI&_hPd7)>y{zC}7XLdJ*@^uhSQyl-BrFrS?1Xv#1efHk5
z+k8MZ_)1QB147?wL0oEz{SyS<R>{+%@HYPWnBq9}i>?J<2-)vr^0_4ZN?)icE|uR$
C$>Ze!

literal 0
HcmV?d00001

diff --git a/release/scripts/startup/nodeitems_builtins.py b/release/scripts/startup/nodeitems_builtins.py
index bee6ae80..06f9d05 100644
--- a/release/scripts/startup/nodeitems_builtins.py
+++ b/release/scripts/startup/nodeitems_builtins.py
@@ -366,6 +366,7 @@ compositor_node_categories = [
         NodeItem("CompositorNodeInpaint"),
         NodeItem("CompositorNodeDBlur"),
         NodeItem("CompositorNodePixelate"),
+        NodeItem("CompositorNodeGmic"),
         NodeItem("CompositorNodeSunBeams"),
         ]),
     CompositorNodeCategory("CMP_OP_VECTOR", "Vector", items=[
diff --git a/source/blender/blenkernel/BKE_node.h b/source/blender/blenkernel/BKE_node.h
index d5279c5..e543063 100644
--- a/source/blender/blenkernel/BKE_node.h
+++ b/source/blender/blenkernel/BKE_node.h
@@ -924,6 +924,7 @@ void            ntreeGPUMaterialNodes(struct bNodeTree *ntree, struct GPUMateria
 #define CMP_NODE_TONEMAP	302
 #define CMP_NODE_LENSDIST	303
 #define CMP_NODE_SUNBEAMS	304
+#define CMP_NODE_GMIC       305
 
 #define CMP_NODE_COLORCORRECTION 312
 #define CMP_NODE_MASK_BOX       313
diff --git a/source/blender/blenkernel/intern/node.c b/source/blender/blenkernel/intern/node.c
index 5acfe4a..cb3779f 100644
--- a/source/blender/blenkernel/intern/node.c
+++ b/source/blender/blenkernel/intern/node.c
@@ -3471,7 +3471,8 @@ static void registerCompositNodes(void)
 	register_node_type_cmp_despeckle();
 	register_node_type_cmp_defocus();
 	register_node_type_cmp_sunbeams();
-	
+	register_node_type_cmp_gmic();
+
 	register_node_type_cmp_valtorgb();
 	register_node_type_cmp_rgbtobw();
 	register_node_type_cmp_setalpha();
diff --git a/source/blender/compositor/CMakeLists.txt b/source/blender/compositor/CMakeLists.txt
index 3e1dd83..ffa7f0b 100644
--- a/source/blender/compositor/CMakeLists.txt
+++ b/source/blender/compositor/CMakeLists.txt
@@ -41,6 +41,7 @@ set(INC
 	../render/extern/include
 	../render/intern/include
 	../../../extern/clew/include
+	../../../extern/gmic64/include
 	../../../intern/guardedalloc
 	../../../intern/atomic
 )
@@ -276,6 +277,12 @@ set(SRC
 	operations/COM_VectorBlurOperation.cpp
 	operations/COM_VectorBlurOperation.h
 
+	# GMIC
+	nodes/COM_GmicNode.cpp
+	nodes/COM_GmicNode.h
+	operations/COM_GmicOperation.cpp
+	operations/COM_GmicOperation.h
+
 	nodes/COM_FilterNode.cpp
 	nodes/COM_FilterNode.h
 	nodes/COM_DespeckleNode.cpp
diff --git a/source/blender/compositor/intern/COM_Converter.cpp b/source/blender/compositor/intern/COM_Converter.cpp
index 9fa59be..24018a4 100644
--- a/source/blender/compositor/intern/COM_Converter.cpp
+++ b/source/blender/compositor/intern/COM_Converter.cpp
@@ -116,6 +116,7 @@ extern "C" {
 #include "COM_ViewerNode.h"
 #include "COM_ZCombineNode.h"
 #include "COM_PixelateNode.h"
+#include "COM_GmicNode.h"
 #include "COM_PlaneTrackDeformNode.h"
 
 bool Converter::is_fast_node(bNode *b_node)
@@ -403,6 +404,9 @@ Node *Converter::convert(bNode *b_node)
 		case CMP_NODE_CORNERPIN:
 			node = new CornerPinNode(b_node);
 			break;
+		case CMP_NODE_GMIC:
+			node = new GmicNode(b_node);
+			break;
 		case CMP_NODE_SUNBEAMS:
 			node = new SunBeamsNode(b_node);
 			break;
diff --git a/source/blender/compositor/nodes/COM_GmicNode.cpp b/source/blender/compositor/nodes/COM_GmicNode.cpp
new file mode 100644
index 0000000..02c998e
--- /dev/null
+++ b/source/blender/compositor/nodes/COM_GmicNode.cpp
@@ -0,0 +1,25 @@
+
+#include "COM_GmicNode.h"
+
+#include "COM_GmicOperation.h"
+#include "COM_ExecutionSystem.h"
+
+GmicNode::GmicNode(bNode *editorNode) : Node(editorNode)
+{
+	/* pass */
+}
+
+void GmicNode::convertToOperations(NodeConverter &converter, const CompositorContext &context) const
+{
+	GmicOperation *operation = new GmicOperation();
+
+	const NodeGmic* rna = (NodeGmic*)this->getbNode()->storage;
+	operation->setData(rna);
+	
+	converter.addOperation(operation);
+
+	for (int i = 0; i < (1 + 5); i++) {
+		converter.mapInputSocket(this->getInputSocket(i), operation->getInputSocket(i));
+	}
+	converter.mapOutputSocket(this->getOutputSocket(0), operation->getOutputSocket(0));
+}
diff --git a/source/blender/compositor/nodes/COM_GmicNode.h b/source/blender/compositor/nodes/COM_GmicNode.h
new file mode 100644
index 0000000..658bace
--- /dev/null
+++ b/source/blender/compositor/nodes/COM_GmicNode.h
@@ -0,0 +1,13 @@
+
+#ifndef _COM_GeglNode_h_
+#define _COM_GeglNode_h_
+
+#include "COM_Node.h"
+
+class GmicNode : public Node {
+public:
+	GmicNode(bNode *editorNode);
+	void convertToOperations(NodeConverter &converter, const CompositorContext &context) const;
+};
+
+#endif
diff --git a/source/blender/compositor/operations/COM_GmicOperation.cpp b/source/blender/compositor/operations/COM_GmicOperation.cpp
new file mode 100644
index 0000000..0dd5f97
--- /dev/null
+++ b/source/blender/compositor/operations/COM_GmicOperation.cpp
@@ -0,0 +1,141 @@
+
+#include <string>
+#include "gmic_libc.h"
+
+#include "COM_GmicOperation.h"
+
+GmicOperation::GmicOperation() : SingleThreadedOperation()
+{
+	this->addInputSocket(COM_DT_COLOR);
+	for (int i = 0; i < 5; i++) {
+		this->addInputSocket(COM_DT_VALUE);
+	}
+
+	this->addOutputSocket(COM_DT_COLOR);
+	this->setResolutionInputSocketIndex(0);
+	this->m_inputProgram = NULL;
+	this->m_data = NULL;
+}
+
+void GmicOperation::initExecution()
+{
+	SingleThreadedOperation::initExecution();
+	this->m_inputProgram = getInputSocketReader(0);
+}
+
+void GmicOperation::deinitExecution()
+{
+	this->m_inputProgram = NULL;
+	SingleThreadedOperation::deinitExecution();
+}
+
+MemoryBuffer *GmicOperation::createMemoryBuffer(rcti *source)
+{
+	MemoryBuffer *tile = (MemoryBuffer*)this->m_inputProgram->initializeTileData(source);
+
+	rcti rect;
+	rect.xmin = 0;
+	rect.ymin = 0;
+	rect.xmax = source->xmax;
+	rect.ymax = source->ymax;
+	MemoryBuffer *result = new MemoryBuffer(COM_DT_COLOR, &rect);
+
+	gmic_interface_image images[10]; //Hardcoded amount in C-API, why...?
+	memset(&images, 0, sizeof(images));
+	strcpy(images[0].name, "image0");
+	images[0].width = rect.xmax;
+	images[0].height = rect.ymax;
+	images[0].spectrum = 4;
+	images[0].depth = 1;
+	images[0].is_interleaved = true;
+	images[0].format = E_FORMAT_FLOAT;
+
+	const size_t image_size = images[0].width*images[0].height*images[0].spectrum*images[0].depth * sizeof(float);
+	float *data = (float*)malloc(image_size);
+	memcpy(data, tile->getBuffer(), image_size);
+	images[0].data = data;
+
+	gmic_interface_options options;
+	memset(&options, 0, sizeof(options));
+	options.ignore_stdlib = false;
+	bool abort = false;
+	float progress = 0.0f;
+	options.p_is_abort = &abort;
+	options.p_progress = &progress;
+	options.interleave_output = true;
+	options.no_inplace_processing = true;
+	options.output_format = E_FORMAT_FLOAT;
+
+	std::string interpolation = "1";
+	std::string command;
+
+	// Add argument variables
+	for (int i = 0; i < 5; i++) {
+		float value[4];
+		this->getInputSocketReader(i + 1)->readSampled(&value[0], 0, 0, COM_PS_NEAREST);
+		command += "arg" + std::to_string(i + 1) + "=" + std::to_string(value[0]) + " ";
+	}
+
+	// Downscale
+	int scale = std::min(std::max((int)(this->m_data->quality * 100), 10), 100);
+	command += "--resize2dx " + std::to_string(scale) + "%," + interpolation + " ";
+	command += "-remove[0] ";
+
+	// Add the real user command
+	command.append(m_data->command);
+
+	if (this->m_data->flag & CMP_NODE_GMIC_NORMALIZE) {
+		//Normalize values
+		command += " -n 0,1 ";
+	}
+	// Upscale last image to correct size and format
+	command += " --resize[-1] " + std::to_string(rect.xmax) + "," + std::to_string(rect.ymax) + ",1,4," + interpolation + " ";
+
+	unsigned int image_count = 1; 
+	int error = gmic_call(command.c_str(), &image_count, &images[0], &options);
+	printf("Full GMIC command: '%s', error code: %i\n", command.c_str(), error);
+
+	for (int i = 0; i < image_count; ++i) {
+		printf("Image %u: %ux%u Depth: %u Spectrum: %u\n", i, images[i].width, images[i].height, images[i].depth, images[i].spectrum);
+	}
+
+	if (error == 0) {
+		// All ok, copy the final image into the result buffer
+		gmic_interface_image *final_image = &images[image_count - 1];
+		memcpy(result->getBuffer(), final_image->data, image_size);
+	}
+	else {
+		// An error occurred, fill the result buffer with a solid color
+		float invalid[4] = { 1.0f, 0.0f, 0.0f, 1.0f };
+		for (int y = 0; y < rect.ymax; y++) {
+			for (int x = 0; x < rect.xmax; x++) {
+				result->writePixel(x, y, invalid);
+			}
+		}
+	}
+
+	// Free all temporary buffers
+	for (int i = 0; i < image_count; ++i) {
+		if (images[i].data != data) {
+			gmic_delete_external((float*)images[i].data);
+		}
+	}
+	free(data);
+
+	return result;
+}
+
+bool GmicOperation::determineDependingAreaOfInterest(rcti * /*input*/, ReadBufferOperation *readOperation, rcti *output)
+{
+	if (isCached()) {
+		return false;
+	}
+	else {
+		rcti newInput;
+		newInput.xmin = 0;
+		newInput.ymin = 0;
+		newInput.xmax = this->getWidth();
+		newInput.ymax = this->getHeight();
+		return NodeOperation::determineDependingAreaOfInterest(&newInput, readOperation, output);
+	}
+}
diff --git a/source/blender/compositor/operations/COM_GmicOperation.h b/source/blender/compositor/operations/COM_GmicOperation.h
new file mode 100644
index 0000000..234d745
--- /dev/null
+++ b/source/blender/compositor/operations/COM_GmicOperation.h
@@ -0,0 +1,26 @@
+
+#ifndef _COM_GeglOperation_h_
+#define _COM_GeglOperation_h_
+
+#include "COM_NodeOperation.h"
+#include "COM_SingleThreadedOperation.h"
+
+class GmicOperation : public SingleThreadedOperation {
+private:
+	SocketReader *m_inputProgram;
+	const NodeGmic *m_data;
+public:
+	GmicOperation();
+
+	void initExecution();
+	void deinitExecution();
+	bool determineDependingAreaOfInterest(rcti *input, ReadBufferOperation *readOperation, rcti *output);
+
+	void setData(const NodeGmic *data) { this->m_data = data; }
+
+protected:
+
+	MemoryBuffer *createMemoryBuffer(rcti *rect);
+};
+
+#endif
diff --git a/source/blender/editors/space_node/drawnode.c b/source/blender/editors/space_node/drawnode.c
index f58b405..37427b1 100644
--- a/source/blender/editors/space_node/drawnode.c
+++ b/source/blender/editors/space_node/drawnode.c
@@ -2472,6 +2472,13 @@ static void node_composit_buts_cornerpin(uiLayout *UNUSED(layout), bContext *UNU
 {
 }
 
+static void node_composit_buts_gmic(uiLayout *layout, bContext *UNUSED(C), PointerRNA *ptr)
+{
+	uiItemR(layout, ptr, "quality", UI_ITEM_R_SLIDER, "Quality", ICON_NONE);
+	uiItemR(layout, ptr, "command", 0, "", ICON_NONE);
+	uiItemR(layout, ptr, "normalize", 0, NULL, ICON_NONE);
+}
+
 static void node_composit_buts_sunbeams(uiLayout *layout, bContext *UNUSED(C), PointerRNA *ptr)
 {
 	uiItemR(layout, ptr, "source", UI_ITEM_R_EXPAND, "", ICON_NONE);
@@ -2710,6 +2717,10 @@ static void node_composit_set_butfunc(bNodeType *ntype)
 		case CMP_NODE_SUNBEAMS:
 			ntype->draw_buttons = node_composit_buts_sunbeams;
 			break;
+		case CMP_NODE_GMIC:
+			ntype->draw_buttons = node_composit_buts_gmic;
+			ntype->width = ntype->width * 2;
+			break;
 		case CMP_NODE_BRIGHTCONTRAST:
 			ntype->draw_buttons = node_composit_buts_brightcontrast;
 	}
diff --git a/source/blender/makesdna/DNA_node_types.h b/source/blender/makesdna/DNA_node_types.h
index b922ac0..edd01f4 100644
--- a/source/blender/makesdna/DNA_node_types.h
+++ b/source/blender/makesdna/DNA_node_types.h
@@ -886,6 +886,13 @@ typedef struct NodeShaderUVMap {
 	char uv_map[64];
 } NodeShaderUVMap;
 
+typedef struct NodeGmic {
+	float quality;
+	char flag;
+	char command[1024];
+	char pad[3];
+} NodeGmic;
+
 typedef struct NodeSunBeams {
 	float source[2];
 
@@ -899,6 +906,8 @@ typedef struct NodeSunBeams {
 /* script node flag */
 #define NODE_SCRIPT_AUTO_UPDATE		1
 
+/* GMIC node flag */
+#define CMP_NODE_GMIC_NORMALIZE		1
 
 /* frame node flags */
 #define NODE_FRAME_SHRINK		1	/* keep the bounding box minimal */
diff --git a/source/blender/makesrna/intern/rna_nodetree.c b/source/blender/makesrna/intern/rna_nodetree.c
index 05b64c9..4c3b21a 100644
--- a/source/blender/makesrna/intern/rna_nodetree.c
+++ b/source/blender/makesrna/intern/rna_nodetree.c
@@ -6780,6 +6780,30 @@ static void def_cmp_planetrackdeform(StructRNA *srna)
 	RNA_def_property_update(prop, NC_NODE | NA_EDITED, "rna_Node_update");
 }
 
+static void def_cmp_gmic(StructRNA *srna)
+{
+	PropertyRNA *prop;
+
+	RNA_def_struct_sdna_from(srna, "NodeGmic", "storage");
+
+	prop = RNA_def_property(srna, "quality", PROP_FLOAT, PROP_UNSIGNED);
+	RNA_def_property_float_sdna(prop, NULL, "quality");
+	RNA_def_property_range(prop, 0.0f, 100.0f);
+	RNA_def_property_ui_range(prop, 0.0f, 1.0f, 10, 3);
+	RNA_def_property_ui_text(prop, "Quality", "");
+	RNA_def_property_update(prop, NC_NODE | NA_EDITED, "rna_Node_update");
+
+	prop = RNA_def_property(srna, "normalize", PROP_BOOLEAN, PROP_NONE);
+	RNA_def_property_boolean_sdna(prop, NULL, "flag", CMP_NODE_GMIC_NORMALIZE);
+	RNA_def_property_ui_text(prop, "Normalize", "Normalize result of the node to 0..1 range");
+	RNA_def_property_update(prop, NC_NODE | NA_EDITED, "rna_Node_update");
+
+	prop = RNA_def_property(srna, "command", PROP_STRING, PROP_NONE);
+	RNA_def_property_string_sdna(prop, NULL, "command");
+	RNA_def_property_ui_text(prop, "Command", "");
+	RNA_def_property_update(prop, NC_NODE | NA_EDITED, "rna_Node_update");
+}
+
 static void def_cmp_sunbeams(StructRNA *srna)
 {
 	PropertyRNA *prop;
diff --git a/source/blender/nodes/CMakeLists.txt b/source/blender/nodes/CMakeLists.txt
index c5a3c70..44851bd 100644
--- a/source/blender/nodes/CMakeLists.txt
+++ b/source/blender/nodes/CMakeLists.txt
@@ -124,6 +124,7 @@ set(SRC
 	composite/nodes/node_composite_switch.c
 	composite/nodes/node_composite_switchview.c
 	composite/nodes/node_composite_colorcorrection.c
+	composite/nodes/node_composite_gmic.c
 	composite/nodes/node_composite_pixelate.c
 
 	composite/node_composite_tree.c
diff --git a/source/blender/nodes/NOD_composite.h b/source/blender/nodes/NOD_composite.h
index a5c2e60..8d6cdac 100644
--- a/source/blender/nodes/NOD_composite.h
+++ b/source/blender/nodes/NOD_composite.h
@@ -138,6 +138,7 @@ void register_node_type_cmp_pixelate(void);
 void register_node_type_cmp_trackpos(void);
 void register_node_type_cmp_planetrackdeform(void);
 void register_node_type_cmp_cornerpin(void);
+void register_node_type_cmp_gmic(void);
 
 void node_cmp_rlayers_outputs(struct bNodeTree *ntree, struct bNode *node);
 void node_cmp_rlayers_register_pass(struct bNodeTree *ntree, struct bNode *node, struct Scene *scene, struct SceneRenderLayer *srl, const char *name, int type);
diff --git a/source/blender/nodes/NOD_static_types.h b/source/blender/nodes/NOD_static_types.h
index 02422a8..232611c 100644
--- a/source/blender/nodes/NOD_static_types.h
+++ b/source/blender/nodes/NOD_static_types.h
@@ -214,6 +214,7 @@ DefNode( CompositorNode, CMP_NODE_PIXELATE,       0,                      "PIXEL
 DefNode( CompositorNode, CMP_NODE_PLANETRACKDEFORM,def_cmp_planetrackdeform,"PLANETRACKDEFORM",PlaneTrackDeform,"Plane Track Deform",""            )
 DefNode( CompositorNode, CMP_NODE_CORNERPIN,      0,                      "CORNERPIN",      CornerPin,        "Corner Pin",        ""              )
 DefNode( CompositorNode, CMP_NODE_SUNBEAMS,       def_cmp_sunbeams,       "SUNBEAMS",       SunBeams,         "Sun Beams",         ""              )
+DefNode( CompositorNode, CMP_NODE_GMIC,           def_cmp_gmic,           "GMIC",           Gmic,             "G'MIC",             ""              )
 
 DefNode( TextureNode,    TEX_NODE_OUTPUT,         def_tex_output,         "OUTPUT",         Output,           "Output",            ""              )
 DefNode( TextureNode,    TEX_NODE_CHECKER,        0,                      "CHECKER",        Checker,          "Checker",           ""              )
diff --git a/source/blender/nodes/composite/nodes/node_composite_gmic.c b/source/blender/nodes/composite/nodes/node_composite_gmic.c
new file mode 100644
index 0000000..8808c7f
--- /dev/null
+++ b/source/blender/nodes/composite/nodes/node_composite_gmic.c
@@ -0,0 +1,40 @@
+
+#include "node_composite_util.h"
+
+static bNodeSocketTemplate cmp_node_gmic_in[] = {
+	{ SOCK_RGBA,  1, N_("Image"),      1.0f, 1.0f, 1.0f, 1.0f },
+	{ SOCK_FLOAT, 1, N_("$arg1"),      1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1000.0f },
+	{ SOCK_FLOAT, 1, N_("$arg2"),      1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1000.0f },
+	{ SOCK_FLOAT, 1, N_("$arg3"),      1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1000.0f },
+	{ SOCK_FLOAT, 1, N_("$arg4"),      1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1000.0f },
+	{ SOCK_FLOAT, 1, N_("$arg5"),      1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1000.0f },
+	{ -1, 0, "" }
+};
+
+static bNodeSocketTemplate cmp_node_gmic_out[] = {
+	{ SOCK_RGBA, 0, N_("Image") },
+	{ -1, 0, "" }
+};
+
+static void node_composit_init_gmic(bNodeTree *UNUSED(ntree), bNode *node)
+{
+	NodeGmic *data = MEM_callocN(sizeof(NodeGmic), "gmic node");
+
+	data->quality = 0.5f;
+	data->flag = CMP_NODE_GMIC_NORMALIZE;
+	memset(data->command, 0, sizeof(data->command));
+
+	node->storage = data;
+}
+
+void register_node_type_cmp_gmic(void)
+{
+	static bNodeType ntype;
+
+	cmp_node_type_base(&ntype, CMP_NODE_GMIC, "G'MIC", NODE_CLASS_OP_FILTER, 0);
+	node_type_socket_templates(&ntype, cmp_node_gmic_in, cmp_node_gmic_out);
+	node_type_init(&ntype, node_composit_init_gmic);
+	node_type_storage(&ntype, "NodeGmic", node_free_standard_storage, node_copy_standard_storage);
+
+	nodeRegisterType(&ntype);
+}
diff --git a/source/creator/CMakeLists.txt b/source/creator/CMakeLists.txt
index 8f26e24..4da2ce0 100644
--- a/source/creator/CMakeLists.txt
+++ b/source/creator/CMakeLists.txt
@@ -1055,6 +1055,7 @@ add_dependencies(blender makesdna)
 
 setup_blender_sorted_libs()
 target_link_libraries(blender ${BLENDER_SORTED_LIBS})
+target_link_libraries(blender "${CMAKE_SOURCE_DIR}/extern/gmic64/libcgmicstatic.lib")
 
 setup_liblinks(blender)
 
-- 
2.8.0.windows.1

